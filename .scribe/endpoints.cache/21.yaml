## Autogenerated by Scribe. DO NOT MODIFY.

name: 'note Managemant'
description: |-
  This endpoint allows you to delete a note by its ID.
  It performs a lookup for the note, deletes it using the DeletionService,
  and returns a formatted API response.
endpoints:
  -
    httpMethods:
      - POST
    uri: api/master-panel/note
    metadata:
      groupName: 'note Managemant'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new note.'
      description: |-
        This endpoint allows you to create a new note of type `text` or `drawing`. If the note type is `drawing`,
        you must provide valid `drawing_data` in base64-encoded SVG format. The note is associated with the current
        workspace and the authenticated user (either client or user).
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      note_type:
        name: note_type
        description: 'The type of note. Must be either `text` or `drawing`.'
        required: true
        example: text
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'The title of the note.'
        required: true
        example: 'Project Kickoff Notes'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      color:
        name: color
        description: 'Color code or name for the note.'
        required: true
        example: '#ffcc00'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The description or body content of the note (required for text notes).'
        required: false
        example: 'Discussed project milestones and timelines.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      drawing_data:
        name: drawing_data
        description: 'The base64-encoded SVG content (required if note_type is `drawing`).'
        required: false
        example: PHN2ZyB...
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      note_type: text
      title: 'Project Kickoff Notes'
      color: '#ffcc00'
      description: 'Discussed project milestones and timelines.'
      drawing_data: PHN2ZyB...
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Note created successfully.",
            "data": {
              "id": 12,
              "data": {
                "id": 12,
                "title": "Project Kickoff Notes",
                "note_type": "text",
                "color": "#ffcc00",
                "description": "Discussed project milestones and timelines.",
                "creator_id": "u_1",
                "workspace_id": 3,
                ...
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "The given data was invalid.",
            "errors": {
              "note_type": ["The note type field is required."],
              "title": ["The title field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while creating the note.",
            "data": {
              "error": "Exception message here"
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/master-panel/note/{id}'
    metadata:
      groupName: 'note Managemant'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing note.'
      description: |-
        Updates the note identified by `id` with the provided data.
        Supports notes of type `text` or `drawing`. For `drawing` type,
        the `drawing_data` must be a base64-encoded string, which will be decoded.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the note.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The ID of the note to update.'
        required: true
        example: 12
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      note_type:
        name: note_type
        description: 'The type of note, either `text` or `drawing`.'
        required: true
        example: text
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'The title of the note.'
        required: true
        example: 'Meeting notes'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      color:
        name: color
        description: 'The color associated with the note.'
        required: true
        example: '#FF5733'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'nullable Optional description for the note.'
        required: false
        example: 'Detailed notes from the meeting'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      drawing_data:
        name: drawing_data
        description: 'required_if:note_type,drawing Base64-encoded SVG data for drawing notes.'
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      id: 12
      note_type: text
      title: 'Meeting notes'
      color: '#FF5733'
      description: 'Detailed notes from the meeting'
      drawing_data: consequatur
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "error": false,
             "message": "Note updated successfully.",
             "data": {
                "id": 12,
                "data": {
                   "id": 12,
                   "note_type": "text",
                   "title": "Meeting notes",
                   "color": "#FF5733",
                   "description": "Detailed notes from the meeting",
                   "drawing_data": null,
                   // ... other formatted note fields
                }
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
             "error": true,
             "message": "The given data was invalid.",
             "errors": {
                "title": ["The title field is required."],
                "note_type": ["The selected note type is invalid."]
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
             "error": true,
             "message": "An error occurred while updating the note.",
             "error": "Detailed error message here"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/master-panel/note/{id}'
    metadata:
      groupName: 'note Managemant'
      groupDescription: |-
        This endpoint allows you to delete a note by its ID.
        It performs a lookup for the note, deletes it using the DeletionService,
        and returns a formatted API response.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a Note'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the note to delete.'
        required: true
        example: 7
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 7
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Note deleted successfully.",
            "data": {
              "id": 7,
              "title": "Project Kickoff Notes",
              "content": "Initial project meeting details...",
              "user_id": 3,
              "workspace_id": 2,
              "created_at": "2024-05-24T08:12:54.000000Z",
              "updated_at": "2024-06-01T10:20:41.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "No query results for model [App\\Models\\Note] 99",
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "Something went wrong while deleting the note.",
            "data": []
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/master-panel/note/{id?}'
    metadata:
      groupName: 'note Managemant'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Get All Notes or a Specific Note

        This endpoint retrieves either:
        - A list of all notes (if no ID is provided), or
        - A single note by its ID (if provided).

        Notes are filtered by the current workspace and admin context.
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'optional The ID of the note to retrieve.'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Notes retrieved successfully.",
            "data": {
              "total": 2,
              "data": [
                {
                  "id": 1,
                  "title": "Sprint Planning",
                  "note_type": "text",
                  "color": "#ffffff",
                  "workspace_id": 1,
                  "admin_id": 1,
                  "creator_id": "u_3",
                  "created_at": "2025-06-01T12:00:00.000000Z",
                  "updated_at": "2025-06-01T12:30:00.000000Z"
                },
                {
                  "id": 2,
                  "title": "UI Wireframe",
                  "note_type": "drawing",
                  "color": "#000000",
                  "workspace_id": 1,
                  "admin_id": 1,
                  "creator_id": "u_3",
                  "created_at": "2025-06-02T08:45:00.000000Z",
                  "updated_at": "2025-06-02T09:15:00.000000Z"
                }
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Note retrieved successfully.",
            "data": {
              "total": 1,
              "data": [
                {
                  "id": 3,
                  "title": "Design Plan",
                  "note_type": "drawing",
                  "color": "#ffdd00",
                  "workspace_id": 1,
                  "admin_id": 1,
                  "creator_id": "u_5",
                  "created_at": "2025-06-03T10:00:00.000000Z",
                  "updated_at": "2025-06-03T10:30:00.000000Z"
                }
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "Note not found.",
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "Failed to retrieve notes.",
            "data": {
              "error": "SQLSTATE[42S02]: Base table or view not found: 1146 Table 'notes' doesn't exist"
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
