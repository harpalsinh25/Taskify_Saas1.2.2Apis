## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Managemant'
description: |-
  This endpoint allows you to create a new user account with optional profile image,
  address info, and role assignment. It also attaches the user to the workspace and
  sends email notifications if configured.

  Requires authentication as an admin user.
endpoints:
  -
    httpMethods:
      - POST
    uri: api/master-panel/user
    metadata:
      groupName: 'User Managemant'
      groupDescription: |-
        This endpoint allows you to create a new user account with optional profile image,
        address info, and role assignment. It also attaches the user to the workspace and
        sends email notifications if configured.

        Requires authentication as an admin user.
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      first_name:
        name: first_name
        description: "The user's first name."
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: "The user's last name."
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address. Must be unique."
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password. Minimum 6 characters."
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match the password field.'
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      address:
        name: address
        description: "The user's address."
        required: false
        example: '123 Main St'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: "The user's phone number."
        required: false
        example: '+1234567890'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      country_code:
        name: country_code
        description: 'ISO country dialing code.'
        required: false
        example: '+91'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      city:
        name: city
        description: "The user's city."
        required: false
        example: Mumbai
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      state:
        name: state
        description: "The user's state."
        required: false
        example: Maharashtra
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      country:
        name: country
        description: "The user's country."
        required: false
        example: India
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      zip:
        name: zip
        description: "The user's postal/ZIP code."
        required: false
        example: '400001'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      dob:
        name: dob
        description: "The user's date of birth. Format: Y-m-d."
        required: false
        example: '1990-05-15'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      doj:
        name: doj
        description: "The user's date of joining. Format: Y-m-d."
        required: false
        example: '2024-01-01'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'The role to assign to the user.'
        required: true
        example: employee
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      country_iso_code:
        name: country_iso_code
        description: 'ISO country code.'
        required: false
        example: IN
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      profile:
        name: profile
        description: "The user's profile image. JPEG, JPG, PNG. Max 2MB."
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      require_ev:
        name: require_ev
        description: 'Whether to require email verification. Default is true.'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      status:
        name: status
        description: 'Whether to set the user as active. Default is false.'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      first_name: John
      last_name: Doe
      email: john.doe@example.com
      password: secret123
      password_confirmation: secret123
      address: '123 Main St'
      phone: '+1234567890'
      country_code: '+91'
      city: Mumbai
      state: Maharashtra
      country: India
      zip: '400001'
      dob: '1990-05-15'
      doj: '2024-01-01'
      role: employee
      country_iso_code: IN
      require_ev: false
      status: false
    fileParameters:
      profile: null
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "User created successfully.",
            "data": {
              "id": 123,
              "data": {
                "id": 123,
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@example.com",
                "status": 1,
                "email_verified_at": "2025-06-04T11:03:41.000000Z",
                "photo": "photos/john.png",
                ...
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "The given data was invalid.",
            "errors": {
              "email": ["The email has already been taken."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "User could not be created.",
            "error": "Call to a member function hasRole() on null",
            "line": 81,
            "file": "/path/to/UserController.php"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/master-panel/user/{id}'
    metadata:
      groupName: 'User Managemant'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user profile details.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user to update.'
        required: true
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 17
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      first_name:
        name: first_name
        description: "The user's first name."
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: "The user's last name."
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: "nullable The user's phone number."
        required: false
        example: '+1234567890'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      country_code:
        name: country_code
        description: "nullable The user's country code."
        required: false
        example: US
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      address:
        name: address
        description: "nullable The user's address."
        required: false
        example: '123 Main St'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      city:
        name: city
        description: 'nullable The city of the user.'
        required: false
        example: 'New York'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      state:
        name: state
        description: 'nullable The state of the user.'
        required: false
        example: NY
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      country:
        name: country
        description: 'nullable The country of the user.'
        required: false
        example: USA
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      zip:
        name: zip
        description: 'nullable The postal/zip code.'
        required: false
        example: '10001'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      dob:
        name: dob
        description: 'nullable Date of birth in app-specific format.'
        required: false
        example: '1990-01-01'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      doj:
        name: doj
        description: 'nullable Date of joining in app-specific format.'
        required: false
        example: '2020-01-01'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'nullable Minimum 6 characters, to update password.'
        required: false
        example: 'O[2UZ5ij-e/dl4m{o,'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'required_with:password Must match password.'
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      country_iso_code:
        name: country_iso_code
        description: 'nullable ISO code of country.'
        required: false
        example: US
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      upload:
        name: upload
        description: 'image nullable User profile image (jpeg, jpg, png). Max size 2048 KB.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      status:
        name: status
        description: 'nullable User active status (only admin or full access users).'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      role:
        name: role
        description: "nullable Role to assign to the user (cannot update admin's role)."
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      first_name: John
      last_name: Doe
      phone: '+1234567890'
      country_code: US
      address: '123 Main St'
      city: 'New York'
      state: NY
      country: USA
      zip: '10001'
      dob: '1990-01-01'
      doj: '2020-01-01'
      password: 'O[2UZ5ij-e/dl4m{o,'
      password_confirmation: consequatur
      country_iso_code: US
      status: false
      role: consequatur
    fileParameters:
      upload: null
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "id": 1
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "The given data was invalid.",
            "errors": {
              "first_name": ["The first name field is required."],
              "password": ["The password must be at least 6 characters."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/master-panel/user/{id}'
    metadata:
      groupName: 'User Managemant'
      groupDescription: 'This endpoint deletes a user by their ID. It also removes all associated todos for the user. If the user does not exist, a 404 error is returned.'
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user to delete.'
        required: true
        example: 6
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 6
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "User deleted successfully.",
            "id": "6",
            "title": "John Doe",
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\User] 999"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Failed to delete User due to internal server error."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/master-panel/user/{id?}'
    metadata:
      groupName: 'User Managemant'
      groupDescription: |-
        This API endpoint retrieves a list of users within the current workspace or a specific user by ID.
        Supports filtering by search term, status, roles, type (project/task), sorting, and pagination.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get users list or specific user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'optional The ID of the user to retrieve. Leave blank to get all users.'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters:
      search:
        name: search
        description: 'optional Filter users by name, email, or phone.'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'optional Field to sort by. Default is `id`.'
        required: false
        example: first_name
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'optional Sort order: `ASC` or `DESC`. Default is `DESC`.'
        required: false
        example: ASC
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'optional Filter users by status (1 for active, 0 for inactive).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role_ids:
        name: role_ids
        description: 'optional Filter users by one or more role IDs.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      type:
        name: type
        description: 'optional Source of user relation (`project` or `task`).'
        required: false
        example: project
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      typeId:
        name: typeId
        description: 'optional ID of the related project or task. Required if `type` is provided.'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'optional Number of results per page.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      isApi:
        name: isApi
        description: 'optional Indicates API context (used internally). Default: true.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      search: John
      sort: first_name
      order: ASC
      status: 1
      role_ids:
        - 1
        - 2
      type: project
      typeId: 3
      limit: 10
      isApi: true
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Users retrieved successfully",
            "total": 2,
            "data": [
              {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "john@example.com",
                "phone": "+91 9876543210",
                "status": 1,
                "created_at": "2024-01-01 10:00:00",
                "updated_at": "2024-06-01 09:00:00",
                "role": "Admin",
                "profile": "...",
                "assigned": "...",
                "actions": "..."
              }
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "User retrieved successfully",
            "data": {
              "id": 5,
              "first_name": "Jane",
              "last_name": "Smith",
              "email": "jane@example.com",
              "phone": "+91 1234567890",
              "status": 1,
              ...
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": true,
            "message": "User not found",
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Failed to retrieve users",
            "error": "Exception message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
