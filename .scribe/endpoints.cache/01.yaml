## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Authentication'
description: 'This endpoint allows a user or client to authenticate using email and password. It applies rate limiting and returns a Bearer token upon successful login.'
endpoints:
  -
    httpMethods:
      - POST
    uri: api/register
    metadata:
      groupName: 'User Authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Register a new user'
      description: |-
        This endpoint allows a new user to register with first name, last name, email, phone, and password.
        The system ensures the email and phone are unique across both users and clients.
        Upon successful registration, the user is assigned the "admin" role, an admin record is created, and a token is issued.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      first_name:
        name: first_name
        description: 'The first name of the user. Must not contain numbers.'
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: 'The last name of the user. Must not contain numbers.'
        required: true
        example: ramanandi
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'Must be a valid email and unique across users and clients.'
        required: true
        example: bhurabhai@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: 'Must be a string of digits and unique among users.'
        required: true
        example: '9876543210'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Minimum 6 characters.'
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match the password.'
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      first_name: John
      last_name: ramanandi
      email: bhurabhai@example.com
      phone: '9876543210'
      password: secret123
      password_confirmation: secret123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "User registered successfully",
            "redirect_url": "http://localhost:8000/login",
            "access_token": "1|ABCDEF1234567890...",
            "token_type": "Bearer"
          }
        headers: []
        description: 'Successful Registration'
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": {
              "email": [
                "The email has already been taken in users or clients."
              ],
              "password": [
                "Password must be at least 6 characters long."
              ]
            }
          }
        headers: []
        description: 'Validation Failed'
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Something went wrong on the server."
          }
        headers: []
        description: 'Server Error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      groupName: 'User Authentication'
      groupDescription: 'This endpoint allows a user or client to authenticate using email and password. It applies rate limiting and returns a Bearer token upon successful login.'
      subgroup: ''
      subgroupDescription: ''
      title: login
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the account.'
        required: true
        example: admin@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for the account.'
        required: true
        example: '123456'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: admin@gmail.com
      password: '123456'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "User login successful",
            "access_token": "1|X1Y2Z3TOKENEXAMPLE",
            "token_type": "Bearer",
            "account_type": "user",
            "role": "admin",
            "user": {
              "id": 1,
              "name": "John Doe",
              "email": "johndoe@example.com",
              ...
            },
            "redirect_url": "http://yourapp.com/workspaces/edit/1"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "error": true,
            "message": "Invalid credentials. Please try again."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "email": ["The email field is required."],
              "password": ["The password field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 429
        content: |-
          {
            "error": true,
            "message": "Too many login attempts. Please try again in 60 seconds."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An unexpected error occurred. Please try again later."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/forgot-password
    metadata:
      groupName: 'User Authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send Password Reset Link'
      description: |-
        This endpoint sends a password reset link to the given email address
        if it belongs to a registered user or client.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user or client.'
        required: true
        example: user@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Password reset link emailed successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "The given data was invalid.",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Password reset link couldn't be sent, please check email settings."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Password reset link couldn't be sent, please configure email settings."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/reset-password
    metadata:
      groupName: 'User Authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset Password (API)'
      description: "Reset a user's or client's password using a valid token. This is used after the user clicks a reset link in their email."
      authenticated: false
      custom: []
    headers:
      workspace_id: 'integer required The ID of the workspace the user belongs to. Example: 1'
      Accept: application/json
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      token:
        name: token
        description: 'The password reset token from the reset email.'
        required: true
        example: abc123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email of the user or client.'
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password (min 6 characters).'
        required: true
        example: newPassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match the password field.'
        required: true
        example: newPassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      account_type:
        name: account_type
        description: 'Type of account: `user` or `client`.'
        required: true
        example: user
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      token: abc123
      email: john.doe@example.com
      password: newPassword123
      password_confirmation: newPassword123
      account_type: user
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Password reset successful.",
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "This password reset token is invalid.",
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An unexpected error occurred.",
            "data": {
              "error": "Exception message here"
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
