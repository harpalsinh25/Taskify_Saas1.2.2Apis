name: 'Status Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/master-panel/status/{id?}'
    metadata:
      groupName: 'Status Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Status List or a Single Status'
      description: |-
        This endpoint allows you to:
        - Retrieve a list of all status records.
        - Retrieve a specific status record by providing its ID.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'Optional. The ID of the status you want to retrieve.'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "rows": [
              {
                "id": 1,
                "title": "Pending",
                "roles_has_access": "Admin, Manager",
                "color": "<span class=\"badge bg-warning\">Pending</span>",
                "created_at": "2024-08-20 10:12 AM",
                "updated_at": "2024-08-25 03:45 PM"
              },
              {
                "id": 2,
                "title": "Approved",
                "roles_has_access": "Admin",
                "color": "<span class=\"badge bg-success\">Approved</span>",
                "created_at": "2024-08-21 11:30 AM",
                "updated_at": "2024-08-26 02:15 PM"
              }
            ],
            "total": 2
          }
        headers: []
        description: 'Fetch all statuses'
        custom: []
      -
        status: 200
        content: |-
          {
            "id": 3,
            "title": "Rejected",
            "roles_has_access": "User",
            "color": "<span class=\"badge bg-danger\">Rejected</span>",
            "created_at": "2024-08-22 09:00 AM",
            "updated_at": "2024-08-28 01:00 PM"
          }
        headers: []
        description: 'Fetch single status by ID'
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: 'Unauthenticated request'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Status not found."
          }
        headers: []
        description: 'Status not found for given ID'
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "Internal Server Error"
          }
        headers: []
        description: 'Unexpected server error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/master-panel/statuses
    metadata:
      groupName: 'Status Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a New Status'
      description: 'This endpoint creates a new status entry with a unique slug and assigns roles that have access to it.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The name of the status.'
        required: true
        example: Approved
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      color:
        name: color
        description: 'The Bootstrap color class (without `bg-` prefix).'
        required: true
        example: success
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role_ids:
        name: role_ids
        description: 'Optional list of role IDs to associate with the status.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: Approved
      color: success
      role_ids:
        - 1
        - 2
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Status created successfully.",
            "id": 5,
            "status": {
              "id": 5,
              "title": "Approved",
              "color": "success",
              "slug": "approved",
              "admin_id": 1,
              "created_at": "2025-05-28T12:34:56.000000Z",
              "updated_at": "2025-05-28T12:34:56.000000Z"
            }
          }
        headers: []
        description: 'Successful creation'
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "title": ["The title field is required."],
              "color": ["The color field is required."]
            }
          }
        headers: []
        description: 'Validation failed'
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Status couldn't created."
          }
        headers: []
        description: 'Creation failed due to internal error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/master-panel/statuses/{id}'
    metadata:
      groupName: 'Status Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an Existing Status'
      description: 'This endpoint updates the title, color, and associated roles of an existing status.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the status.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The ID of the status to update.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'The updated title of the status.'
        required: true
        example: Rejected
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      color:
        name: color
        description: 'The updated color class (without `bg-` prefix).'
        required: true
        example: danger
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role_ids:
        name: role_ids
        description: 'Optional array of role IDs to sync with the status.'
        required: false
        example:
          - 1
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      id: 5
      title: Rejected
      color: danger
      role_ids:
        - 1
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Status updated successfully.",
            "id": 5
          }
        headers: []
        description: 'Successful update'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Status] 99"
          }
        headers: []
        description: 'Status not found'
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "id": ["The id field is required."],
              "title": ["The title field is required."],
              "color": ["The color field is required."]
            }
          }
        headers: []
        description: 'Validation failed'
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Status couldn't updated."
          }
        headers: []
        description: 'Update failed due to internal error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/master-panel/statuses/{id}'
    metadata:
      groupName: 'Status Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a Status'
      description: 'This endpoint deletes a status if it is not associated with any project or task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the status to delete.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Status deleted successfully."
          }
        headers: []
        description: 'Successful deletion'
        custom: []
      -
        status: 403
        content: |-
          {
            "error": true,
            "message": "Status can't be deleted.It is associated with a project or task."
          }
        headers: []
        description: 'Status associated with project or task'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Status] 99"
          }
        headers: []
        description: 'Status not found'
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Something went wrong while deleting the status."
          }
        headers: []
        description: 'Deletion failed due to server error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/master-panel/destroy-multiple-statuses
    metadata:
      groupName: 'Status Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Multiple Statuses'
      description: 'Deletes multiple statuses by their IDs if they are not associated with any project or task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      ids:
        name: ids
        description: 'Array of status IDs to delete. Each ID must exist in the statuses table.'
        required: true
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'ids.*':
        name: 'ids.*'
        description: 'Individual status ID.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      ids:
        - 1
        - 2
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Status(es) deleted successfully.",
            "id": [1, 2],
            "titles": ["Approved", "Pending"]
          }
        headers: []
        description: 'Successful deletion'
        custom: []
      -
        status: 403
        content: |-
          {
            "error": true,
            "message": "Status can't be deleted.It is associated with a project"
          }
        headers: []
        description: 'Status associated with project or task'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Status] 99"
          }
        headers: []
        description: 'Status not found'
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "ids": ["The ids field is required."],
              "ids.0": ["The selected ids.0 is invalid."]
            }
          }
        headers: []
        description: 'Validation failed'
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Something went wrong while deleting the statuses."
          }
        headers: []
        description: 'Deletion failed due to server error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
