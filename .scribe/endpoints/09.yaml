name: 'project issues'
description: 'This endpoint allows you to create a new issue related to a specific project. You must provide issue details such as title, description, status, and optional assignees. The issue will be created under the given project and notifications will be dispatched to the assignees.'
endpoints:
  -
    httpMethods:
      - POST
    uri: 'api/master-panel/projects/{project_id}/issues'
    metadata:
      groupName: 'project issues'
      groupDescription: 'This endpoint allows you to create a new issue related to a specific project. You must provide issue details such as title, description, status, and optional assignees. The issue will be created under the given project and notifications will be dispatched to the assignees.'
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new issue under a project.'
      description: ''
      authenticated: true
      custom: []
    headers:
      workspace_id: 'integer required The ID of the workspace context (e.g., `2`)'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      project_id:
        name: project_id
        description: 'The ID of the project.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      project:
        name: project
        description: 'The ID of the project in which the issue is being created.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      project_id: 2
      project: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the issue.'
        required: true
        example: 'Database connectivity issue'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'A description of the issue.'
        required: true
        example: 'There is an intermittent issue connecting to the database from the API server.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'The current status of the issue. Must be one of: `open`, `in_progress`, `resolved`, `closed`.'
        required: true
        example: open
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      assignee_id:
        name: assignee_id
        description: 'optional An array of user IDs to assign the issue to.'
        required: false
        example:
          - 1
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'Database connectivity issue'
      description: 'There is an intermittent issue connecting to the database from the API server.'
      status: open
      assignee_id:
        - 1
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Issue created successfully.",
            "data": {
              "id": 17,
              "project_id": 5,
              "title": "Database connectivity issue",
              "description": "There is an intermittent issue connecting to the database from the API server.",
              "status": "open",
              "created_by": 2,
              "assignees": [
                {
                  "id": 1,
                  "name": "John Doe",
                  "email": "john@example.com"
                },
                {
                  "id": 3,
                  "name": "Jane Smith",
                  "email": "jane@example.com"
                }
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "Validation failed.",
            "data": {
              "title": ["The title field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Database error occurred while creating the issue.",
            "data": {
              "details": "SQLSTATE[23000]: Integrity constraint violation: 1048 Column 'project_id' cannot be null..."
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/master-panel/projects/issues/{id}'
    metadata:
      groupName: 'project issues'
      groupDescription: |-
        This endpoint allows you to update the title, description, status, and assignees of an existing issue
        associated with a project. You must pass the issue `id` as part of the payload. Assignee user IDs
        must be valid user IDs that exist in the system.

        The request works for both API and web usage. Use `Accept: application/json` and `isApi=true` for API responses.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing issue within a project.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Accept: application/json
      workspace_id: '2'
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the issue.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The ID of the issue to update.'
        required: true
        example: 8
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'The updated title of the issue. Max 256 characters.'
        required: true
        example: 'Database connectivity issue'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The updated description of the issue. Max 512 characters.'
        required: true
        example: 'There is an intermittent issue connecting to the database from the API server.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'The current status of the issue. Must be one of: open, in_progress, resolved, closed.'
        required: true
        example: in_progress
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      assignee_id:
        name: assignee_id
        description: 'The list of user IDs to assign this issue to. Optional.'
        required: false
        example:
          - 1
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      id: 8
      title: 'Database connectivity issue'
      description: 'There is an intermittent issue connecting to the database from the API server.'
      status: in_progress
      assignee_id:
        - 1
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Issue updated successfully.",
            "issue": {
              "id": 8,
              "title": "Database connectivity issue",
              "description": "There is an intermittent issue connecting to the database from the API server.",
              "status": "in_progress",
              "assignees": [...]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": true,
            "message": "Issue not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "Validation failed.",
            "errors": {
              "title": ["The title field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An unexpected error occurred.",
            "details": "Exception message here"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/master-panel/projects/issues/{id_id}'
    metadata:
      groupName: 'project issues'
      groupDescription: |-
        This endpoint deletes a specific issue associated with a project. It uses the `DeletionService` to handle
        soft or hard deletion logic based on the application's internal rules.

        Requires authentication and a valid issue ID. Works for both API and web responses if handled inside `DeletionService`.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete an issue from a project.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Accept: application/json
      workspace_id: '2'
      Content-Type: application/json
    urlParameters:
      id_id:
        name: id_id
        description: 'The ID of the id.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      project:
        name: project
        description: 'The ID of the project to which the issue belongs.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the issue to delete.'
        required: true
        example: 8
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id_id: 1
      project: 5
      id: 8
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Issue deleted successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": true,
            "message": "Issue not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An unexpected error occurred.",
            "details": "Exception message here"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/master-panel/projects/issues/{id?}'
    metadata:
      groupName: 'project issues'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        List or fetch issues (API)

        This endpoint returns a paginated list of issues for a given project, or a single issue by its ID if `type=issue` is provided.
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'optional The project ID to filter issues by, or the issue ID if `type=issue` is set.'
        required: false
        example: 117
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 117
    queryParameters:
      type:
        name: type
        description: "optional If set to 'issue', fetches a single issue by its ID."
        required: false
        example: issue
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      search:
        name: search
        description: 'optional Search term for title, description, status, assignee, or creator.'
        required: false
        example: bug
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'optional Field to sort by. Default: created_at.'
        required: false
        example: updated_at
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'optional Sort direction (ASC or DESC). Default: DESC.'
        required: false
        example: ASC
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'optional Filter by issue status.'
        required: false
        example: open
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      assigned_to:
        name: assigned_to
        description: 'optional Filter by assigned user ID.'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      created_by:
        name: created_by
        description: 'optional Filter by creator user ID.'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      start_date:
        name: start_date
        description: 'date optional Filter issues created after this date.'
        required: false
        example: '2025-06-01'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      end_date:
        name: end_date
        description: 'date optional Filter issues created before this date.'
        required: false
        example: '2025-06-30'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'optional Number of results per page. Default: 10.'
        required: false
        example: 20
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      type: issue
      search: bug
      sort: updated_at
      order: ASC
      status: open
      assigned_to: 5
      created_by: 2
      start_date: '2025-06-01'
      end_date: '2025-06-30'
      limit: 20
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Issue list fetched successfully.",
            "rows": [
              {
                "id": 1,
                "project_id": 117,
                "title": "data not retrive",
                "description": "when Api was call data nor retrived",
                "status": "in_progress",
                "created_by": {
                  "id": 2,
                  "first_name": "herry",
                  "last_name": "porter",
                  "email": "admin@gmail.com"
                },
                "assignees": [
                  {
                    "id": 2,
                    "first_name": "herry",
                    "last_name": "porter",
                    "email": "admin@gmail.com",
                    "photo": null
                  }
                ],
                "created_at": "2025-06-12 03:59:42",
                "updated_at": "2025-06-12 03:59:42"
              }
            ],
            "total": 1,
            "current_page": 1,
            "last_page": 1,
            "per_page": 10
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
